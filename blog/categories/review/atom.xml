<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: review | Jackon Yang's blog]]></title>
  <link href="http://JackonYang.github.io/blog/categories/review/atom.xml" rel="self"/>
  <link href="http://JackonYang.github.io/"/>
  <updated>2014-12-21T11:21:18+08:00</updated>
  <id>http://JackonYang.github.io/</id>
  <author>
    <name><![CDATA[Jackon Yang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何对待别人的建议]]></title>
    <link href="http://JackonYang.github.io/blog/2013/04/08/advices/"/>
    <updated>2013-04-08T00:14:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/04/08/advices</id>
    <content type="html"><![CDATA[<p>在我们的生命中，总会有连绵不断的人给自己提出建议。
生命只有一次，不能从头再来，在结果出来之前，我们总是无法判断建议的好与坏。
如何听取别人的建议，就变成了一件很棘手的事情。
尤其是，很多时候，我们总是把这与一个人的品性和潜力直接挂钩。</p>

<p>有 4 段经历，对我发生了颠覆性的影响。
都是关于如何接受别人建议的典型案例。</p>

<!--more-->


<h2>4 段个人经历</h2>

<h4>初中物理老师的训斥，让我懂得: 坚持自己的观点是超越前人的基础</h4>

<p>初中时特佩服物理老师，言听计从，虽然后来证明老师说的并不一定对。
当然，大多数情况是对的。</p>

<p>某次，我又要听老师的建议，然后被狠狠地揍了一顿，唯一一次挨这个老师的板子。</p>

<p>老师的原话大意如下：<br/>
我的认识水平和思维层次决定了我只能做一个初中物理老师，如果你处处都听我的，那么你以后也会是我这个档次的。比我聪明，但最多也是一个高中物理老师。你的理想就是以后当一个中学老师？要有自己的想法，坚持自己认为正确的事情，不管我当时怎么反对你。</p>

<p>有些老师，虽缺乏高深的专业知识，但是可以做到师者的最高境界：传道。<br/>
有些老师，号称是高等教育工作者，却连师者的最低境界都做不到：解惑。</p>

<h4>高中班主任的训斥，令我更加清醒的认识: 什么是排斥别人的建议</h4>

<p>高中时痴迷于物理，反对应试教育，极度偏激。</p>

<p>班主任训斥我：<br/>
你们这类人有一个特点，总是认为自己是对的，总是认为自己善于听取别人的建议。
其实，你们只听取同类人的建议。
其他人批评自己的时候，都会说你不理解我，然后拒绝接受任何批评。</p>

<p>其实，大多数种类的人都这样吧？包括批评我的语文老师。</p>

<h4>大学，听取老师和学长们的建议，导致自己连拼一下的胆量都没有。</h4>

<p>刚入大学时，希望 4 年以后可以去 MIT。<br/>
于是找老师和学长求取经验，请客吃饭、当跟屁虫等各种陶瓷手段无所不用其极。</p>

<p>老师说：
年轻人有理想是好的，但不能自不量力。建议你考虑一下香港大学或者香港中文。</p>

<p>学长说：
西大这么多年来，甭说申请到 MIT 这种 top 5 的学校，就是 top 10 的都没有。
你觉得你能创造西大的历史，而且一跃成为最优秀的么？</p>

<p>我听取了前人的诚恳建议，不再坚持自己的追求。</p>

<p>4年以后，毕业时，看到一篇报道：“烟台大学 07 级数学系毕业生拿到哈佛全奖 offer”</p>

<p>不知道大学的老师看到这篇报道，是否会想起，
4年前，自己身边也曾有一个学生怀揣着这个梦想。 最终连试一下的胆量都没有了。</p>

<h4>大一数学建模，没有听取学长的建议，完成了被认为是可能的事情</h4>

<p>大一下学期做数学建模竞赛，有个号称多年不遇的建模奇才，当时大四。 我问他：lingo 是否可以处理二维数组问题。 他想了一下说：肯定不可以，lingo 不像c语言，只能处理一维数组。</p>

<p>之后，自己看 lingo 教材的过程中看到一道例题，不是二维数组，但是很像。 当天晚上，从头学lingo，4个小时以后，写出了处理二维数组的代码。 完成了学长认为不可能的事情。</p>

<p>大牛有四种境界：</p>

<ol>
<li>我觉得自己牛。</li>
<li>别人说我牛。</li>
<li>说我牛的人要牛。</li>
<li>我说谁牛谁就牛。</li>
</ol>


<p>传说中的大牛，大多数情况是第二层次的。</p>

<h2>我现在的理解与认识</h2>

<p>这 4 件事情令我印象很深,多年以后依旧能够回忆起每一个细节。</p>

<p>现在，我只听取 3 种建议。</p>

<ol>
<li><p>大牛在自己领域的建议。不管对与错，都听。</p>

<p> 他就是这么成功的，我照做不一定会成功，但肯定比自己摸索着概率高、速度快。 大牛只认两种：我自己领教过他的真功夫，我认为牛的人推荐的牛人。</p></li>
<li><p>只认事实，用事实说服我。</p>

<p> 这个时候往往会各种争论。</p></li>
<li><p>合作对象的建议。只要他坚持，只要这个方法能做出结果，那就按他说的来。</p>

<p> 我能适应他的想法，他不一定能适应我的。 这种观点基于自己相对另类的特点，以及对个人学习能力的自信。 比如，我改用eclipse写代码很简单，让对方改用 vim 就不是那么容易了。 我可以改用 word 写论文，但让对方改用 latex 有些不现实。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[thoughtworks 面试总结]]></title>
    <link href="http://JackonYang.github.io/blog/2013/03/22/thoughtworks-interview/"/>
    <updated>2013-03-22T10:18:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/03/22/thoughtworks-interview</id>
    <content type="html"><![CDATA[<p>从 3 月 10 日给 thoughtworks 投简历开始，经过电面、笔试、写代码、pair、face to face 等几个流程，我想，昨天应该是最后的环节了吧。历时 12 天，不算短，但安排的很紧凑。公司的响应速度很快，总是比我估算的时间提前 4-5 个小时给结果。</p>

<p>体验性的面试，在增进相互了解的同时，也是自我反思的好机会。不管最终结果如何，通过面试更好的反思了自己，这也算是收获吧。</p>

<!--more-->


<p><strong>概括的说：</strong></p>

<ol>
<li>毕业后以具体需求为导向的学习，导致自己忽视基本功，忽视潜力。</li>
<li>当 pair 的大牛把 java 等解释语言的经验用于 python 时，未敢坚持自己的观点。</li>
<li>face to face 高手面前，秀实力变成秀下限。年少轻狂时，能秀的都是浮云，一旦深入，空洞无物。</li>
</ol>


<p><strong>以下几个错误，导致自己很可能悲剧：</strong></p>

<ul>
<li>笔试坑爹，</li>
<li>pair 时编码规范不被认同，</li>
<li>face to face 选错了话题和方向，深入交流之后未能展现出技术干货。</li>
<li>放开了讨论技术时，不够谦逊，甚至反对过分强调设计模式。</li>
</ul>


<p><strong>各环节具体总结如下：</strong></p>

<h3>电面：曾经一直期待的面试内容突然到来，措手不及。</h3>

<p>个人理解，我的电面都头到尾都在关注一个问题：
你是如何持续提升自己的，从大学到工作后。</p>

<p>虽然面试前有各种查攻略，但这个问题还是着实让我措手不及。
我准备的都是自己的工作经历/项目经验方面。
毕业以后不再追求刷读书量，而是如何更高效的获取所需的知识。
看书少了，也没有特定的方向和领域。
突然问到自己最近一年看的书，瞬间大脑空白，什么书都想不起来了。</p>

<h3>笔试：对考试真的无法再爱了，自己的硬伤。</h3>

<p>不知道为什么，自从上了大学，面对考试总是会莫名其妙的紧张、不自信。
最终的结果也会证明，不自信是对的，因为结果总是无法让人自信。</p>

<p>从最初为了证明自己而热衷考试，到后来因为不喜欢应试教育而对考试完全排斥，
再到现在，对考试真的无法再爱了，与考试的性质无关。</p>

<!--高中的时候，老师就曾劝戒我：考高分也是一种能力，分高虽不代表他知识掌握的比你好，但如何用有限的知识在考试中获得更高的分数，这本身也是一种重要的能力。-->


<h3>代码与 pair: 专注技术往往可以表现出更好的技术实力</h3>

<p>先用 3 天时间完成了一个代码任务，然后 pair 扩展自己的代码。</p>

<p>在 pair 过程中犯了一个最严重的错误：在技术问题上观点不一致时，坚持自己观点太少。
一方面，源自对自己的实力不自信；另一方面，场景与身份特殊，担心被判定为不愿接受别人的批评与建议。</p>

<p><em>自己编码的 3 个严重的问题:</em></p>

<ol>
<li><p>over design。</p>

<p> 菜鸟的经典特点。一方面对需求理解不深刻，宁愿多写代码，也不愿被认为考虑太片面。另一方面，炫技。试图使用更多的设计模式证明自己懂的多。</p></li>
<li><p>unit test 无法精确定位 bug 位置。</p>

<p> 曾经在某一篇文章中看到，好的 unit test 本身就是最好的帮助文档和 API 文档。
极度赞同，并把这作为衡量自己用例好与坏的几条基本原则之一。</p>

<p>  由此产生一个问题，相似场景的多种输入参数怎么测。我的选择是把测试数据存为一个 dictionary，key 和 value 分别是输入和预期结果。这样测试代码只需循环依次调用 API 即可。其他人可以根据循环内的代码清晰理解接口的调用方法。这种做法直接导致，一旦出现 bug，只能定位到测试用例层面，无法定位导致 bug 的具体输入。</p></li>
<li><p>pep8 编码规范</p>

<p> 个人在编码的过程中发现，pep8 过于苛刻，有时为了增加很小的可读性，需要多敲击很多次键盘。我想，一个好的编码规范不应该严重影响编码效率。所以对代码进行 pep8 检查时，忽略了 2 条规范。</p>

<p> 正确的做法是：优化 vim 来解决多敲击键盘的问题，而不是忽略编码规范。优化原理很简单，在 vim 中定义一套缩写规则，在输入的过程中自动进行 pep8 修正。比如输入 &ldquo;=&rdquo; 时插入 &ldquo; &lt;space> = &lt;space>"。或许，已经有这方面的插件了。</p></li>
</ol>


<p><em>被指为问题，但并不认同的地方：</em></p>

<ol>
<li><p>全局变量的使用</p>

<p> 我在几个 module 中使用了全局变量，被认为是一个很不好的习惯。当时有提出反对意见：看了几个 python 的类库，都是这么实现的。但对方依旧不认同这种行为。</p>

<p> 昨晚有反思，也有回忆对方 pair 过程中的言论，突然有一种感觉，他可能把 java/c 等的编码习惯延续到了 python 中。而 java 的很多习惯，与 python 是有冲突的。比如全局变量，python 每一个文件是一个 module，只要加载 module 时用 import 而非 “from &hellip; import ”，module 中全局变量只在 module 内生效，并不是真正意义上的全局变量。
所以，java/c 中使用全局变量的弊端，在 python 中并不会出现。</p></li>
</ol>


<h3>face to face: 高手面前秀死自己</h3>

<p>这个环节的核心在于，自己选一个技术话题做简要阐述，然后进行深入交流，展现自己的技术特色。我没有理解对方的这个需求，自我阐述时，选择了一个做出了小的成果，但对底层原理缺乏深入了解的话题。导致之后的 1 个多小时，一直没有精彩的表现。</p>

<p>我想，深入的钻研与成果之间总是存在冲突的。深入总是高投入低产出的过程，需要长期的积累。真正出成果的，往往是那些应用层面的，理解需求与用法，提供一套优质 API 即可。
面试的过程中，总是会难以克制的去秀自己。
年轻的时候，能力与经验有限，能拿出来秀的，往往都是一些相对肤浅、容易出成果的。
一旦碰到内行深究下去，就变成了秀下限。</p>

<p>如果再有这种场合，一定选择一个自己熟悉的、可以研究十年的话题，比如图论、图数据库、社交网络结构。</p>
]]></content>
  </entry>
  
</feed>
