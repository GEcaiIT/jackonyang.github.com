<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jackon Yang's blog]]></title>
  <link href="http://JackonYang.github.io/atom.xml" rel="self"/>
  <link href="http://JackonYang.github.io/"/>
  <updated>2014-12-21T11:21:18+08:00</updated>
  <id>http://JackonYang.github.io/</id>
  <author>
    <name><![CDATA[Jackon Yang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ubuntu 开发环境]]></title>
    <link href="http://JackonYang.github.io/blog/2013/11/03/ubuntu-dev-env/"/>
    <updated>2013-11-03T12:00:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/11/03/ubuntu-dev-env</id>
    <content type="html"><![CDATA[<p>主要包括: git/github, vim, mysql, markdown, octopress, rar/gtalk 等日常工具</p>

<!--more-->


<h2>apt-get 源更新</h2>

<pre> <code>
$ sudo apt-get update
$ sudo apt-get upgrade
</code> </pre>


<p></p>

<p>apt-get 的 2 个重要参数，封装为脚本时比较有帮助。</p>

<ul>
<li><code>-y</code> Assume Yes to all queries and do not prompt</li>
<li><code>-qq</code> No output except for errors</li>
</ul>


<h2>git &amp; github</h2>

<h4>安装 git 并配置 github 帐号信息</h4>

<pre> <code>
$ sudo apt-get install git-all xclip
$ git config --global user.name "Jackon Yang" 
$ git config --global user.email "jiekunyang@gmail.com"
</code> </pre>


<p></p>

<h4>添加 ssh 密钥</h4>

<p>详细说明: <a href="https://help.github.com/articles/generating-ssh-keys">https://help.github.com/articles/generating-ssh-keys</a></p>

<pre> <code>
$ mkdir -p ~/.ssh && cd ~/.ssh
$ ssh-keygen -t rsa -C "jiekunyang@gmail.com"
$ xclip -sel clip < ~/.ssh/id_rsa.pub  # id_rsa.pub 中的密钥保存到剪切板中
$ ssh -T git@github.com  # test connection

# output
# Hi JackonYang! You've successfully authenticated, but GitHub does not provide shell access.
</code> </pre>


<p></p>

<h2>mysql</h2>

<h4>mysql server and GUI</h4>

<pre> <code>
$ sudo apt-get install mysql-server mysql-workbench  # mysql toolbox
$ sudo service mysql restart
</code> </pre>


<p></p>

<h4>字符编码配置：</h4>

<p><code>etc/mysql/my.cnf</code> 中添加:</p>

<pre> <code>
[client]
default-character-set = utf8

[mysqld]
character-set-server = utf8
collation-server = utf8_general_ci
</code> </pre>


<p></p>

<h4>完全删除 mysql 及其配置</h4>

<p>有一些是多余的，建议还是按照顺序执行一遍</p>

<pre> <code>
$ sudo apt-get autoremove --purge mysql-server-5.0
$ sudo apt-get remove mysql-server
$ sudo apt-get autoremove mysql-server
$ sudo apt-get remove mysql-common  # VIP
$ dpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P  # 清理残留数据
</code> </pre>


<p></p>

<h2>vim and markdown</h2>

<pre> <code>
$ sudo apt-get install vim-gtk exuberant-ctags  # vim and ctags
$ sudo apt-get install zathura vifm  # pdf and explorer with vim shortcut
$ sudo apt-get install pandoc retext
</code> </pre>


<p></p>

<h2>daily app</h2>

<pre> <code>
$ sudo apt-get install xchm unzip shutter
$ sudo apt-get install calibre  # e-book management
$ sudo apt-get install convmv p7zip-full
# gtalk
$ sudo add-apt-repository ppa:pidgin-developers/ppa
$ sudo apt-get update
$ sudo apt-get install -y --force-yes pidgin
</code> </pre>


<p></p>

<h2>unrar</h2>

<p><a href="http://www.rarsoft.com/download.htm">download rar</a>
并执行如下安装命令:</p>

<pre> <code>
$ sudo make install
$ sudo ln -s /usr/local/bin/rar /usr/bin
</code> </pre>


<p></p>

<h2>blog with octopress</h2>

<figure class='code'><figcaption><span>blog with octopress  (install_octopress.sh)</span> <a href='http://JackonYang.github.io/downloads/code/install_octopress.sh'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>sudo apt-get install -y curl rbenv
</span><span class='line'>curl -L https://get.rvm.io | bash -s stable --ruby
</span><span class='line'><span class="nb">source</span> ~/.rvm/scripts/rvm
</span><span class='line'>rvm install 1.9.3
</span><span class='line'>rvm use 1.9.3
</span><span class='line'>rvm rubygems latest
</span><span class='line'>
</span><span class='line'>rm -rf ~/blog
</span><span class='line'>git clone git@github.com:JackonYang/jackonyang.github.com.git ~/blog
</span><span class='line'><span class="nb">cd</span> ~/blog
</span><span class='line'>
</span><span class='line'>gem install bundler
</span><span class='line'>gem install RedCloth
</span><span class='line'><span class="c"># If you use rbenv, rehash to be able to run the bundle command</span>
</span><span class='line'>rbenv rehash
</span><span class='line'>bundle install
</span><span class='line'>rvm rvmrc warning ignore /home/jackonyang/blog/.rvmrc
</span><span class='line'>
</span><span class='line'>rake setup_github_pages<span class="o">[</span>git@github.com:JackonYang/jackonyang.github.com.git<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># error shooting</span>
</span><span class='line'><span class="c"># https://rvm.io/integration/gnome-terminal/</span>
</span></code></pre></td></tr></table></div></figure>


<h2>dropped</h2>

<p>曾经需要，正常情况下，现在不再需要</p>

<h4>pdf for chinese</h4>

<p>upgrade 后已不需要</p>

<pre> <code>
$ sudo apt-get install poppler-data poppler-utils
</code> </pre>


<p></p>

<p>用如下内容替换 <code>/etc/fonts/conf.d/49-sansserif.conf</code></p>

<figure class='code'><figcaption><span>font conf  (font_conf.conf)</span> <a href='http://JackonYang.github.io/downloads/code/font_conf.conf'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE fontconfig SYSTEM &quot;fonts.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;fontconfig&gt;</span>
</span><span class='line'><span class="c">&lt;!--</span>
</span><span class='line'><span class="c">  If the font still has no generic name, add sans-serif</span>
</span><span class='line'><span class="c"> --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;match</span> <span class="na">target=</span><span class="s">&quot;pattern&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;test</span> <span class="na">qual=</span><span class="s">&quot;all&quot;</span> <span class="na">name=</span><span class="s">&quot;family&quot;</span> <span class="na">compare=</span><span class="s">&quot;not_eq&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>sans-serif<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/test&gt;</span>
</span><span class='line'>      <span class="nt">&lt;test</span> <span class="na">qual=</span><span class="s">&quot;all&quot;</span> <span class="na">name=</span><span class="s">&quot;family&quot;</span> <span class="na">compare=</span><span class="s">&quot;not_eq&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>serif<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/test&gt;</span>
</span><span class='line'>      <span class="nt">&lt;test</span> <span class="na">qual=</span><span class="s">&quot;all&quot;</span> <span class="na">name=</span><span class="s">&quot;family&quot;</span> <span class="na">compare=</span><span class="s">&quot;not_eq&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>monospace<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/test&gt;</span>
</span><span class='line'>      <span class="nt">&lt;edit</span> <span class="na">name=</span><span class="s">&quot;family&quot;</span> <span class="na">mode=</span><span class="s">&quot;append_last&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>Garuda<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/edit&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/match&gt;</span>
</span><span class='line'><span class="nt">&lt;/fontconfig&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>解压中文目录乱码</h4>

<pre> <code>
$ LANG=C 7z X zipFileName
$ convmv -f gbk -t utf8 -r --notest *  # convert directory
</code> </pre>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[科技图书的阅读过程管理工具]]></title>
    <link href="http://JackonYang.github.io/blog/2013/10/21/reading-process-management/"/>
    <updated>2013-10-21T23:14:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/10/21/reading-process-management</id>
    <content type="html"><![CDATA[<p>在十月的尾巴上，我终于找到了一个新的项目: 一款针对科技类书籍的阅读过程管理工具。</p>

<p>第一款最小可行产品，从改进豆瓣读书做起。</p>

<!--more-->


<h2>背景需求</h2>

<p>我是豆瓣读书的重度用户，特喜欢标注自己读过的书。一方面，看着自己的读书量一点一点的增加，感觉很棒。另一方面，偶尔翻翻自己读过的书目，回忆曾经的喜怒哀乐。</p>

<h4>几个具体的场景：</h4>

<ol>
<li>当我学习一个专题的时候(比如 python)，喜欢有一个知识地图一类的东东。
 然后一边学习，一边标记进度。看着自己不停的前进，心里有底。</li>
<li>每隔一段时间，我会反思一下，看看自己掌握了多少东西，进度是百分之多少。
 豆瓣上有 10 本书，看了 5 本，进度就是 50%。</li>
<li>有的时候，又想看看自己过去的一个月看了几本书，分别是什么方向的。
 反思过去，规划以后的阅读计划。</li>
</ol>


<h4>豆瓣读书存在的问题</h4>

<ol>
<li>当我重复阅读一本书的时候，豆瓣不能把两次阅读记录分开。</li>
<li>当我近期只看一本书的几个章节时，不管是标记为读过，还是在读，都不能反映我的阅读过程。</li>
<li>只有公开发行的有 ISBN 的图书才能加入豆瓣，好多 IT 书籍木有 ISBN&hellip;</li>
</ol>


<p>类似的问题，阅读科技图书时，很常见。
或许因为豆瓣是文艺的，理解不了理工男的世界。</p>

<p>所以，我尝试着为自己和还在搞科研的兄弟们做一个网站。</p>

<h2>设计目标</h2>

<h4>阅读的 TODO list</h4>

<p>专门用于管理阅读过程的 TODO list.</p>

<p>只是这个 TODO list 不是简单的做完、没做完。
而且，只要鼠标点一点，不懂手动输入太多内容。</p>

<h4>基本原则</h4>

<p>合理的读书时间分配应该满足二八定律。
即，80% 的时间花在 20% 最有价值的内容上。</p>

<p>一款好的管理读书过程(非读书笔记)产品，应该满足以下几个要求：</p>

<ol>
<li>杜绝刷读书量。鼓励用户更关注读书质量，而非数量。</li>
<li>鼓励反复阅读。好书，只读一次是不够的。每读一次，都会有新的体会。</li>
<li>&ldquo;读过&rdquo; 一本书，大多数时候，只需要阅读几个重点章节。</li>
</ol>


<h2>实现方案</h2>

<p>上述的 3 个原则，依次对应于如下的 3 个实现方案。</p>

<h4>阅读状态&mdash;不只是“读过/在读“那么简单</h4>

<p>例如：</p>

<ol>
<li>&lsquo;重复内容&rsquo;: 虽然第一次阅读，但内容都知道了，属于无效阅读。</li>
<li>&lsquo;学习了&rsquo;: 学到了非常有用的东西，但是理解的不够深刻，值得再次阅读。</li>
<li>&lsquo;掌握&rsquo;: 掌握了全部或大多数内容。未掌握的小细节，建议通过其他方式深入学习。</li>
<li>&lsquo;晕&rsquo;: 虽然没看懂，但我隐约感觉到了高端大气上档次。</li>
<li>&lsquo;没价值&rsquo;: 内容空洞无物，或者充满错误之物。</li>
</ol>


<p>通过阅读状态，我们可以很好的鼓励大家关注质量，莫用重复内容刷读书量。
具体方法如下：</p>

<ol>
<li>统计一个人的阅读量时，不统计重复内容的阅读。</li>
<li>根据个人的阅读记录，结合他人标注的&#8217;没价值&#8217;/&lsquo;重复内容&#8217;等标签，生成一个 ignoreList(不推荐阅读的章节)。</li>
<li>如果读者期望尽快了解并评估自己的知识状态，则推荐阅读&#8217;掌握&#8217;标签最多的章节。</li>
</ol>


<h4>多写简评</h4>

<p>我们把读书过程中写下的文字，细分为：</p>

<ul>
<li>简评，即简单评论，更多的是本次阅读体验的概括。
  简评的内容因人而异，同一个人的 2 次阅读往往也不一样。</li>
<li>笔记，书中有价值内容的摘录、总结等。相似度较高，而且随着阅读次数的增加，一般越来越少。</li>
</ul>


<p>如果是反复阅读一本书，当我们期望反思自己的阅读记录时，简评最有用。
所以，鼓励大家多写简评。</p>

<h4>按章节标记阅读状态</h4>

<p>学术类书籍，尤其是科技类，通常不需要完整阅读一本书。
或者说，大多数时候，我们阅读的最小单位是章/节。</p>

<p>标记一个章节是否读过，可以更精确度的跟踪自己的读书进展。</p>

<h2>基本功能</h2>

<h4>用户注册与登录</h4>

<p>若不登录，则无法管理和录入自己的阅读过程。</p>

<p>初期，只提供简单的注册/登录功能。</p>

<h4>图书与章节信息页面</h4>

<p>用户无需登录就可以查阅图书列表，并进入一本图书的详细信息页面。
图书详细信息页面，主要展示章节的名字和摘要。</p>

<p>用户登录后，可以在图书详细信息页面看到自己的历史阅读记录。</p>

<h4>录入自己的阅读记录</h4>

<p>阅读记录的关键信息是：时间、章节、阅读状态、简评、笔记。</p>

<p>阅读状态，从系统预置的选项中选择。</p>

<h4>我的阅读记录</h4>

<p>可以查看自己全部的历史阅读记录，或者某一本书、某一个章节的历史阅读记录。</p>

<h2>发展方向</h2>

<p>网站的出路很多，做起来之前，没人能猜到哪条路最好。
具体以后怎么走，我现在也说不清。</p>

<h4>科研人的自媒体平台。</h4>

<p>阅读过程反映学术能力，至于如何反映，是一个需要数据挖掘与建模解决的难题。随着罗辑思维第一轮收费的成功，自媒体已经成为趋势。</p>

<h4>威客平台。</h4>

<p>根据一个人读过的书可以容易的分析出掌握的知识，反向做索引，个人的知识地图就有了。依次为基础做威客，才有可能能真正解决当前威客平台的混乱，避免沦为廉价体力劳动平台。代表网站是猪八戒网。</p>

<h4>走时间管理的方向。</h4>

<p>管理阅读过程，就是管理时间，反思过去，计划将来，任务提醒。这方面的需求有目共睹，但没有一款真正普及的产品。</p>

<h4>其他思路</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[电话本优化]]></title>
    <link href="http://JackonYang.github.io/blog/2013/09/03/contact-individual/"/>
    <updated>2013-09-03T10:36:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/09/03/contact-individual</id>
    <content type="html"><![CDATA[<p>目前的电话本，在以下方面处理的不够人性化</p>

<ul>
<li>多个联系人拥有相同的名字。通常需要用户手动处理。</li>
<li>号码变更。通常只能保存最新的号码。</li>
</ul>


<!--more-->


<h2>重名问题</h2>

<h4>解决方案</h4>

<p>重名问题，最大的影响在于：我们通过姓名来区分一个人，重名之后无法区分了。<br/>
为了解决这个问题，我们增加一个 identifier 字段，表示联系人的简单描述。</p>

<p>如果每次都需要 name + identifier 才能找到一个联系人，那么使用起来不方便了很多。
如果没有重复 name 时只需要 name，那么，添加联系人时，如何判断此人是否重复。</p>

<p>此处需要减少 identifier 字段的用途 &mdash; 仅用于重名时区分联系人。
不再存储联系人的简单描述信息。
如果没有重名，name 对应的 identifier 为空。</p>

<p>用户查询时，可以只填写 name，但后台匹配时，需要追加 identifier 为空的约束条件。</p>

<h4>数据库设计</h4>

<ul>
<li>name: 纯文本，不能为空。</li>
<li>identifer: 纯文本。</li>
</ul>


<p>name + identifer 满足唯一约束。</p>

<p>identier 为空，表示没有重名。故，name 如果有多个 identifer，均不能为空。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim 入门]]></title>
    <link href="http://JackonYang.github.io/blog/2013/09/03/learning-vim/"/>
    <updated>2013-09-03T09:17:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/09/03/learning-vim</id>
    <content type="html"><![CDATA[<p>vim 是一款高效的编辑器，可以快速完成各种复杂的编辑任务。
尤其适合于写代码。证据如下图:</p>

<!--more-->


<p><img src="http://JackonYang.github.io/images/coding_with_vim.gif"></p>

<h2>mode</h2>

<h4>为什么要有 mode</h4>

<p>vim 速度快的根本原因在于，
键盘输入的不仅仅是纯文本，还可以是一个命令。
比如:</p>

<ul>
<li><code>G</code> 可以快速移动到文件末尾。</li>
<li><code>yy</code> 可以复制当前行。</li>
<li><code>dw</code>删除光标所在的单词。</li>
</ul>


<p>由此产生一个问题，如何判断用户要输入文件内容还是执行命令。
比如：用户按下 <code>G</code> 的时候，要输入字母 G 还是快速移动到文件末尾。</p>

<p>解决这个问题的关键是： mode(模式)。</p>

<h4>mode 类型与快速切换</h4>

<p>vim 有很多 mode，常见的有 3 个:</p>

<ol>
<li>Normal/Command mode: 快速移动、修改文档，切换到其他模式。<br/>
 打开 vim 时，默认是 Normal mode.</li>
<li>Insert mode: 键盘输入的所有东西都会插入到文本内容中.<br/>
 Normal 下 <code>i</code> 进入 Insert mode, <code>Esc</code> 回到 Normal mode.</li>
<li>Command-line mode: 打开/保存文件, 查找/替换，执行外部命令等。<br/>
 Normal 下 <code>:</code> 进入 Command mode, <code>Esc</code> 回到 Normal mode</li>
</ol>


<h2>常见命令</h2>

<h4>快速插入：Normal &mdash;> Insert mode 的更多方法</h4>

<p>Normal &mdash;> Insert 的方法很多。<code>i</code> 只是最简单，最常见的一种。
不同命令的区别仅仅在于插入的位置不同</p>

<ul>
<li>i 当前光标处</li>
<li>a 在光标后</li>
<li>I 当前行首</li>
<li>A 当前行尾</li>
<li>o 下一行（插入一行）</li>
<li>o 上一行（插入一行）</li>
</ul>


<h4>剪切/复制/粘贴</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建 python 开发环境]]></title>
    <link href="http://JackonYang.github.io/blog/2013/09/02/python-dev-env/"/>
    <updated>2013-09-02T14:16:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/09/02/python-dev-env</id>
    <content type="html"><![CDATA[<p>开发环境主要包括：</p>

<ul>
<li>运行环境: python2.7</li>
<li>类库管理工具: pip</li>
<li>ubuntu 下常用类库</li>
</ul>


<!--more-->


<h2>windows</h2>

<h4>安装 python2.7</h4>

<p>python 主要包括 2.x 和 3.x 两个大版本，代码之间不兼容。
推荐使用 Python2.7，类库较为丰富，安装相对简单。</p>

<ol>
<li><a href="http://www.python.org/getit/">下载 python</a> 并安装。</li>
<li><a href="http://zhidao.baidu.com/question/187573577.html">设置环境变量</a> PATH 中添加 python 安装路径，默认为 <code>C:\python27</code></li>
</ol>


<h4>setuptools</h4>

<ol>
<li><a href="https://pypi.python.org/pypi/setuptools/1.1">下载 setuptools</a> 并解压</li>
<li>DOS 下进入解压目录执行 <code>python setup.py install</code></li>
</ol>


<h4>pip</h4>

<ol>
<li><a href="https://pypi.python.org/pypi/pip">下载 pip</a> 并解压</li>
<li>DOS 下进入解压目录执行 <code>python setup.py install</code></li>
<li><a href="http://zhidao.baidu.com/question/187573577.html">设置环境变量</a>，PATH 中添加 pip 的路径，默认为 `c:\python27\Scripts&#8217;</li>
</ol>


<h2>ubuntu</h2>

<h4>python and pip tools</h4>

<pre><code>
$ sudo apt-get install -y python python-setuptools python-dev
$ sudo easy_install -U distribute
$ sudo apt-get install python-pip
</code></pre>


<p>如果 python-dev 未安装,
使用 easy_install or setup.py 时报错:
<code>command 'gcc' failed with exit status 1</code></p>

<h4>lib for apache2/mysql</h4>

<pre><code>
$ apt-get install libapache2-mod-python, libmysqlclient-dev
</code></pre>


<p>如果 libmysqlclient-dev 未安装，安装 mysql-python 时报错：
<code>EnvironmentError: mysql_config not found</code></p>

<h4>flake8</h4>

<pre><code>
$ sudo pip install flake8
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python 入门的小任务]]></title>
    <link href="http://JackonYang.github.io/blog/2013/09/02/learning-python-by-issues/"/>
    <updated>2013-09-02T09:16:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/09/02/learning-python-by-issues</id>
    <content type="html"><![CDATA[<p>python 入门，假定已经掌握如下内容：</p>

<ul>
<li>简单的 c 语言基础（二级 c）</li>
<li>知道 c++ 或 JAVA 中 class 的概念</li>
</ul>


<p>个人比较习惯任务式的学习。
所以，本文按顺序列举学习任务和目的，并做简要介绍。</p>

<!--more-->


<h2>搭建 python 开发环境 </h2>

<p>python 版本建议使用 2.7</p>

<p>详细步骤参考<a href="http://JackonYang.github.io/blog/2013/09/02/python-dev-env/">搭建 python 开发环境</a></p>

<h2>参考资料</h2>

<p>入门推荐使用 <a href="http://files.swaroopch.com/python/byte_of_python.pdf">a byte of python</a>(有中文版本).</p>

<h2>打印中文&#8221;你好&#8221; &mdash; 理解字符编码</h2>

<p>最常见的入门程序是打印 hello world，
考虑到实际代码中经常设计中文，需要一点基础的<a href="http://JackonYang.github.io/blog/2012/11/19/introduction-to-common-encoding/">字符编码</a>知识。
我们把入门任务升级为：打印中文 &ldquo;你好&rdquo;</p>

<p>python 代码文件的第一行声明使用 utf-8 编码，即可处理中文。</p>

<figure class='code'><figcaption><span>deal with non_ASCII characters  (hello_world_cn.py)</span> <a href='http://JackonYang.github.io/downloads/code/hello_world_cn.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># encoding=utf8</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">u&#39;你好 vivian!&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>简单的单词数统计 &mdash; 流程控制与常用数据结构</h2>

<p>掌握一点最基本的 python 语法，我们就可以用代码干点有意义的事情了。</p>

<h4>关键语法如下：</h4>

<ul>
<li>str 数据类型</li>
<li>数据结构: list/set/dict</li>
<li>流程控制语句：for/if</li>
</ul>


<h4>任务：统计一句话中各英文单词的出现频率</h4>

<p>text 变量中存储的是一句话，
这句话中可能包含多个子句，子句之间用 &lsquo;,&rsquo; 分割开。
单词与单词之间用空格隔开。
比如：
&ldquo;here is a string, this is a text, this is a sentence&rdquo;</p>

<p>请统计这句话中各英文单词出现的频率，将结果存储为字典。
字典的 key 是单词，value 是出现频率。</p>

<h4>案例代码：</h4>

<figure class='code'><figcaption><span>calculate word frequency  (word_freq.py)</span> <a href='http://JackonYang.github.io/downloads/code/word_freq.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;here is a string, this is a text, this is a sentence&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">sents</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">freqs</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">sent</span> <span class="ow">in</span> <span class="n">sents</span><span class="p">:</span>
</span><span class='line'>    <span class="n">words</span> <span class="o">=</span> <span class="n">sent</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">freqs</span><span class="p">:</span>
</span><span class='line'>            <span class="n">freqs</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">=</span> <span class="n">freqs</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">freqs</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">word</span><span class="p">,</span> <span class="n">freq</span> <span class="ow">in</span> <span class="n">freqs</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;{} -- {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">freq</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim plugin 管理--使用 vundle]]></title>
    <link href="http://JackonYang.github.io/blog/2013/08/27/vim-plugin-management/"/>
    <updated>2013-08-27T03:10:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/08/27/vim-plugin-management</id>
    <content type="html"><![CDATA[<p>使用 vundle 管理 vim 插件，只需维护 vimrc 文件即可。</p>

<p>vundle 的优势主要在于可以自动安装/卸载，清晰的插件列表。</p>

<!--more-->


<h4>需求分析</h4>

<p>vim 的每一个插件相互独立，类似 git submodule 的概念。<br/>
所以，把所有的插件放在一个 project 中进行管理，是非常不合适的。</p>

<p>vim 通过目录区分插件的类型，改变插件目录会导致功能失效。<br/>
submodule 也是按目录管理插件，但与 vim 对目录结构的要求不同。<br/>
所以，无法直接使用 submodule 管理 vim 插件。</p>

<p>vim 插件很多，随时都有可能更新插件，我们对插件的需求也在不断改变。<br/>
所以，不可能把 vim 的插件配置好以后不再改动。</p>

<p>vundle 很好的解决了这些问题：
每个插件一个独立目录，方便管理又能直接在 vim 中生效，
配置文件中维护一个插件列表，自动安装/卸载。</p>

<h4>vundle 安装</h4>

<ol>
<li><code>$ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle</code></li>
<li><p>配置 <code>vimrc</code>，最简模板如下：</p>

<p> <figure class='code'><figcaption><span>sample vimrc  (vimrc)</span> <a href='http://JackonYang.github.io/downloads/code/vimrc'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">nocompatible</span>               <span class="c">&quot; be iMproved</span>
</span><span class='line'><span class="k">filetype</span> off                   <span class="c">&quot; vundle required!</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; use git instead default https when building absolute repo URIs</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:vundle_default_git_proto <span class="p">=</span> <span class="s1">&#39;git&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nb">rtp</span><span class="p">+=~</span><span class="sr">/.vim/</span>bundle<span class="sr">/vundle/</span>
</span><span class='line'><span class="k">call</span> vundle#rc<span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; let Vundle manage Vundle</span>
</span><span class='line'><span class="c">&quot; required! </span>
</span><span class='line'>Bundle <span class="s1">&#39;gmarik/vundle&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; My Bundles here:</span>
</span><span class='line'><span class="c">&quot;</span>
</span><span class='line'><span class="c">&quot; original repos on github</span>
</span><span class='line'><span class="c">&quot; Bundle &#39;tpope/vim-rails.git&#39;</span>
</span><span class='line'><span class="c">&quot; vim-scripts repos</span>
</span><span class='line'>Bundle <span class="s1">&#39;Emmet.vim&#39;</span>
</span><span class='line'>Bundle <span class="s1">&#39;highlight_current_line.vim&#39;</span>
</span><span class='line'><span class="c">&quot; non github repos</span>
</span><span class='line'><span class="c">&quot; Bundle &#39;git://git.wincent.com/command-t.git&#39;</span>
</span><span class='line'><span class="c">&quot; git repos on your local machine (ie. when working on your own plugin)</span>
</span><span class='line'><span class="c">&quot; Bundle &#39;file:///Users/gmarik/path/to/plugin&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">filetype</span> plugin indent <span class="k">on</span>     <span class="c">&quot;vundle required!</span>
</span></code></pre></td></tr></table></div></figure></p></li>
<li>启动 <code>vim</code>，执行 <code>:BundleInstall</code></li>
</ol>


<h4>vundle 用法</h4>

<p>详细的用法，安装完成后用 <code>:h vundle</code> 查看帮助文档。
其他资料的准确度不高。</p>

<p>常用命令：</p>

<ul>
<li>:BundleList          &ndash; list configured bundles</li>
<li>:BundleInstall(!)    &ndash; <a href="update">install</a> bundles</li>
<li>:BundleSearch(!) foo &ndash; <a href="or%20refresh%20cache%20first">search</a> for foo</li>
<li>:BundleClean(!)      &ndash; <a href="https://github.com/gmarik/vundle/blob/master/doc/vundle.txt#L168-180">clean</a> unused scripts</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[两弹奖金]]></title>
    <link href="http://JackonYang.github.io/blog/2013/08/26/liang-dan-jiang-jin/"/>
    <updated>2013-08-26T14:55:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/08/26/liang-dan-jiang-jin</id>
    <content type="html"><![CDATA[<p>邓稼先病重住院期间，杨振宁去医院探望时，两人之间有这样一段对话。</p>

<p>杨振宁问：研究原子弹，国家究竟给了你多少奖金，值得你把命都搭上？<br/>
邓稼先：原子弹十块钱，氢弹十块钱。</p>

<!--more-->


<p>1985年揭晓原子弹特等奖的奖金是10000元，单元里人人有份儿。<br/>
由于人多，单元还垫上了十几万元，才按10元、5元、3元3个品级发下去。<br/>
从1964年10月16日第一颗原子弹爆炸乐成，到1985年首次颁奖，21年中，没有发过奖状，也没有发过1分钱奖金。</p>

<p>邓稼先因病去世后，
国防科技成就办公室追授邓稼先的《原子弹的打破及兵器化》、《氢弹的打破及兵器化》两篇论著为特等奖，奖金为1000元，
以及打破中子弹等别的两项研究成就，奖金为2000元。</p>

<p>1950年，钱学森在美国的项目协调人酬薪，和讲师、物理研究所兼职的收入相加，是每年近10万美元。
钱学森回国后中科院按照教授一级工资和补贴，是每月不到500元人民币。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[支持半自动化自定义词库的背单词软件]]></title>
    <link href="http://JackonYang.github.io/blog/2013/08/13/personalization-vocabulary/"/>
    <updated>2013-08-13T11:15:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/08/13/personalization-vocabulary</id>
    <content type="html"><![CDATA[<p>背单词总是很痛苦的一件事情。</p>

<p>我尝试过很多种背单词的方法和软件，主要可以分为 2 类。</p>

<ol>
<li>教材模式。基于某一教材或者考试的标准词库，背一段时间以后，越来越多不需要的单词，影响效率。</li>
<li>生词本模式。纯手工维护一个生词本，维护成本偏高一些。</li>
</ol>


<p>基于这些不好的背单词经历，我试图做一个半自动的自定义词库。</p>

<p>项目地址：<a href="https://github.com/JackonYang/personalization-vocabulary">https://github.com/JackonYang/personalization-vocabulary</a></p>

<!--more-->


<h4>功能概述</h4>

<p>根据个人的英语水平、兴趣和经常阅读的文章，
自动创建一个自定义的生词库，供背单词使用。</p>

<p>自定义生词库的关键是找出一个人可能感兴趣的生词，供反复背诵。
从而避免按照四六级词库背单词，背了一堆没用的单词。</p>

<p>当然，用户也可以手动添加和删除生词库中的单词，精调自己的生词库。</p>

<h4>基本的原理</h4>

<ol>
<li>记录用户查询单词的历史记录，由此获取用户需要记忆的单词，本质就是词汇量测试。</li>
<li>用户指定 n 篇自己感兴趣的文章，从中找出出现频率偏高的单词、话题，</li>
<li>感兴趣的单词与不认识的单词取交集，即为初始的自定义词库。</li>
</ol>


<h4>应用</h4>

<ol>
<li>研究生，写论文。前期针对物理 + 计算机</li>
<li>学渣。学渣不求满分，只求过线，不需要背完四六级词库的所有单词。指定一个目标分数，个性化一下，少背一点单词。</li>
</ol>


<h4>用户数据获取与分析</h4>

<p>没有用户数据的个性化，都是耍流氓。</p>

<p>用户的词汇量，是比较关键的数据之一。一般采用抽样测试 + 估算的方法。</p>

<p>大多数人的词汇量在 5k 左右，本科低年级的词汇量在 3k 左右。
平均每 3 秒钟识别一个单词，识别 5k 个单词需要 4h， 3k 个单词只要 2.5h。
如果软件界面设计的人性化一点，
比如每次同时识别 3 个单词，另有 300 个绝对安全的单词。
最终可以把时间控制在 30min-1h。用户的接受度会比较高一些。</p>

<p>这么做，不仅仅是评估词汇量，更重要的是形成了一个真实的个人标志。
可以更准确的分析出自己下一步需要背的单词，以及需要背多少单词。</p>

<h4>记忆曲线</h4>

<p>艾宾浩斯曲线等各种经典的记忆曲线，都只能是一个参考曲线。</p>

<p>效率最高的记忆曲线，
必然是针对个人英语水平、记忆能力、一般记忆难度计算出的曲线。</p>

<p>所谓一般记忆难度，值得是背过这个单词的人，平均需要多长时间可以记住。
记忆能力，则是根据自己背过的单词，计算出的个人记忆能力。
这二者的关系，恰如经济理论中的一般劳动和特殊劳动。</p>

<h4>熟词记忆</h4>

<p>我们要背的真的是生词么？</p>

<p>据说美国农夫的词汇量是 2000。我大中国高中生的词汇量都是3k了。
考过六级的，五千左右不算夸张吧？</p>

<p>但是，有几个过了六级的能像美国农夫那样说英语，更不用说高中生了。</p>

<p>我们的短板，不是生词，而是熟词掌握的不熟练。
对熟词的掌握程度，是影响大多数人英语水平的关键。</p>

<p>对于一篇（几篇）感兴趣的文章，统计词频，评估单词的重要程度。
推荐用户先掌握重要的熟词。</p>

<p>这里的重要程度，参考 TF-INF 算法。
出现的频率是关键因素，但不是唯一因素，
比如 the/a/an 等冠词出现频率通常最高，但无需背诵。</p>

<p>熟词，除了读和写以外，听和发音也很关键。</p>

<h4>听与说</h4>

<p>这是大多数人的短版，需要从单词入手彻底解决。</p>

<p>另外，外出时，零碎时间最多，可以利用起来背单词。
走路、坐车时盯着屏幕很不方便，所以，需要语音式的。</p>

<h4>社交</h4>

<p>推荐阅读、相互修改作文。</p>

<p>付费请高手修改自己的作文。</p>

<h4>UI 设计</h4>

<p>为了防止用户背单词时，不知道进度的时间恐慌症，需要有一个进度条提示进度。</p>

<h4>词库</h4>

<p>巴朗 3500 词，SAT 考生。单词太多，需要优化精选。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客页面原型设计]]></title>
    <link href="http://JackonYang.github.io/blog/2013/08/13/blog-page-design/"/>
    <updated>2013-08-13T10:30:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/08/13/blog-page-design</id>
    <content type="html"><![CDATA[<p>使用 octopress 搭建个人博客，重新设计前端页面的主题和展示样式.
遵循形式为内容服务的原则。</p>

<h4>基本元素</h4>

<ul>
<li>banner</li>
<li>navigation</li>
<li>博客摘要与详细内容</li>
<li>最近发表、标签索引等扩展信息</li>
<li>footer</li>
</ul>


<!--more-->


<h4>banner 设计与实现</h4>

<p>banner 代码位于 <code>source/_includes/custom/header.html</code></p>

<p>2 种设计风格：</p>

<ul>
<li>简洁风 &mdash; 个人头像/logo + name + 简要介绍</li>
<li>秀  &mdash; 大幅 banner 图片，爱因斯坦头像</li>
</ul>


<h4>navigation 导航栏</h4>

<p>需要专门的导航栏么？</p>

<p>需要以下几种页面信息：</p>

<ul>
<li>blog</li>
<li>about</li>
<li>rss订阅</li>
<li>分类浏览</li>
</ul>


<p>博客内容的导航&mdash;目录，参考
<a href="http://www.zfanw.com/blog/zencoding-vim-tutorial-chinese.html">http://www.zfanw.com/blog/zencoding-vim-tutorial-chinese.html</a></p>

<h4>博客摘要与详细信息</h4>

<ul>
<li>发表时间</li>
<li>题目</li>
<li>文章摘要/完整内容</li>
<li>分类</li>
<li>标签</li>
<li>阅读数</li>
<li>评论</li>
<li>喜欢</li>
<li>分享</li>
</ul>


<p>读者首先关注当前文章，所以，应该突出当前文章的题目、时间、概要。<br/>
我的博客当前不存在太多的评论，无法获取阅读数，所以，不予展示。</p>

<p>题目与时间靠前展示，概要随后，最后展示分类和标签信息。</p>

<p>为了响应式和布局方便，
题目和时间是否需要分行展示?
分类和标签信息是否需要分行展示?</p>

<h4>reference</h4>

<p><a href="http://ux.etao.com/">http://ux.etao.com/</a></p>

<p><a href="http://coolshell.cn/articles/10337.html">http://coolshell.cn/articles/10337.html</a></p>

<p><a href="http://ethan.herokuapp.com/work">http://ethan.herokuapp.com/work</a></p>

<p><a href="http://blog.alexharr.is/">http://blog.alexharr.is/</a></p>

<p><a href="http://designthinking.ideo.com/">http://designthinking.ideo.com/</a></p>

<p><a href="http://article.yeeyan.org/view/163202/156620">http://article.yeeyan.org/view/163202/156620</a></p>

<p><a href="http://www.yeeyan.org/articles/view/38227/11310">http://www.yeeyan.org/articles/view/38227/11310</a></p>

<p><a href="http://tech.ddvip.com/2008-10/122345307175323.html">http://tech.ddvip.com/2008-10/122345307175323.html</a></p>

<p><a href="http://www.hi-id.com/">http://www.hi-id.com/</a></p>

<p><a href="http://designmind.frogdesign.com/blog/">http://designmind.frogdesign.com/blog/</a></p>

<p><a href="http://www.360doc.com/content/11/0314/21/519755_101151742.shtml">http://www.360doc.com/content/11/0314/21/519755_101151742.shtml</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[原生 javascript 概述]]></title>
    <link href="http://JackonYang.github.io/blog/2013/05/25/javascript-primer/"/>
    <updated>2013-05-25T10:19:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/05/25/javascript-primer</id>
    <content type="html"><![CDATA[<p>JAVAScript 可以分成 3 部分来看，分别是：core(EMCAScript), DOM, BOM.</p>

<ul>
<li>core 即原生 javascript，提供核心语言功能。多使用 EMCAScript 标准。</li>
<li>DOM 即文档对象模型，访问和操作网页内容的方法和接口。如：事件</li>
<li>BOM 浏览器对象模型，提供与浏览器交互的方法和接口，如：AJAX/cookies.</li>
</ul>


<!--more-->


<p><img src="http://JackonYang.github.io/images/JAVAScriptOverview.png" title="'JAVAScript overview'" ></p>

<h2>原生 JAVAScript 的核心概念</h2>

<p>Douglas Crockford 在下面的 2 部视频中非常精髓的讲解了原生 JAVAScript 的核心概念:</p>

<ul>
<li><a href="http://v.youku.com/v_show/id_XMzMzNzQ0MzY4.html">The JavaScript Programming Language</a></li>
<li><a href="http://v.youku.com/v_show/id_XMzMzNzgxNzA4.html">Advanced JavaScript</a></li>
</ul>


<p>整理如下：</p>

<ul>
<li><p>Prototype 继承:</p>

<p>  Crockford 说：这是 JAVAScript 完成 JAVA 想做但没做成的事情的主要原因。</p></li>
<li>closure 闭包: 函数式编程。</li>
<li><p>Objects as general containers:</p>

<p>  使用 object 作为存储容器。object/array/function 等都使用这种结构存储。<br/>
  <code>new Object()</code>创建了一个空的容器。</p></li>
<li><p>linkage though global variables:</p>

<p>  Prototype 继承的原因，导致对象之间存在 linkage。<br/>
  global 变量之间也会有 linkage，表现为共享一个命名空间。<br/>
  这是糟粕，导致的了很多问题。不得不理解，尽量规避。</p></li>
</ul>


<h2>JAVAScript 语法该要</h2>

<p>大小写敏感，所有的关键字都是小写的，习惯上，构造函数首字母大写。</p>

<h4>基本数据类型</h4>

<ol>
<li>number. 只有 float 类型，不精确, <code>0.1 + 0.2 = 0.30000000000000004</code></li>
<li>boolean. false 值包括：0, &lsquo;&rsquo;, null, undefined</li>
<li>string. 不可变。</li>
<li>undefined. 变量的默认值,</li>
<li>null. 空的对象引用，变量赋值为 null 以后，会自动被回收。</li>
</ol>


<h4>数据类型转换</h4>

<p>number/boolean/string，数据类型的首字母大写即为构造函数，可以实现类型转换。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 数据类型转换</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nb">Number</span><span class="p">(</span><span class="s1">&#39;0001230&#39;</span><span class="p">)</span> <span class="c1">// 转为 number</span>
</span><span class='line'><span class="mi">1230</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">+</span><span class="p">[]</span> <span class="c1">// 转为 number</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nb">Boolean</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">// 转为 boolean</span>
</span><span class='line'><span class="kc">false</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">!!</span><span class="s1">&#39;0&#39;</span> <span class="c1">// 转为 boolean</span>
</span><span class='line'><span class="kc">true</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nb">String</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>  <span class="c1">// 转为 string</span>
</span><span class='line'><span class="s2">&quot;123&quot;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nb">String</span><span class="p">(</span><span class="mi">0123</span><span class="p">)</span>  <span class="c1">// 0 开头的数字，八进制</span>
</span><span class='line'><span class="s2">&quot;83&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>注意事项</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// undefined 与 false</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">!!</span><span class="kc">undefined</span>
</span><span class='line'><span class="kc">false</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kc">undefined</span> <span class="o">==</span> <span class="kc">false</span>
</span><span class='line'><span class="kc">false</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kc">undefined</span> <span class="o">===</span> <span class="kc">false</span>
</span><span class='line'><span class="kc">false</span>
</span><span class='line'><span class="c1">// 特殊变量的数据类型</span>
</span><span class='line'><span class="k">typeof</span> <span class="kc">NaN</span>
</span><span class='line'><span class="s2">&quot;number&quot;</span>
</span><span class='line'><span class="c1">// NaN 不等于任何值，包括本身</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kc">NaN</span> <span class="o">===</span> <span class="kc">NaN</span>
</span><span class='line'><span class="kc">false</span>
</span><span class='line'><span class="c1">// undefined 的类型是 undefined</span>
</span><span class='line'><span class="o">&gt;</span> <span class="k">typeof</span> <span class="kc">undefined</span>
</span><span class='line'><span class="s2">&quot;undefined&quot;</span>
</span><span class='line'><span class="c1">// null 的类型是 object</span>
</span><span class='line'><span class="o">&gt;</span> <span class="k">typeof</span> <span class="kc">null</span>
</span><span class='line'><span class="s2">&quot;object&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>操作符</h4>

<ol>
<li><code>a &amp;&amp; b</code>: 如果 a 为true，返回b，否则，返回a</li>
<li><code>a || b</code>: 如果 a 为 false，返回b。可以用于取变量值的默认值。</li>
<li><code>+</code>: 可以用于做加法运算，或连接string。加法运算时，自动类型转换。</li>
</ol>


<h4>Object</h4>

<ol>
<li>字面量</li>
<li>constructor</li>
<li>prototype, linkage</li>
<li>container, key/value</li>
<li><code>===</code> 比较的是reference，而不是value</li>
</ol>


<h4>Arrays</h4>

<ol>
<li>inherits from Object</li>
<li>indexes are converted to strings and used as names for retrieving values.</li>
<li>very efficient for sparse arrays.</li>
<li>length 方法, 比最大的索引大1.</li>
<li>建议使用传统的for循环，而不是 for in</li>
<li>delete 一个value, value 的值变为 undefined，占位符不会消失。用 splice 删除。</li>
<li>don&rsquo;t use arrays as protytypes, length 方法不会继承。</li>
<li>Array.prototype 赋值来修改全部 array 的行为。</li>
</ol>


<h4>函数与闭包</h4>

<p>在 JAVAScript 中，函数即对象。</p>

<p>与 python 的一切皆对象的理念略有不同，JAVAScript 中，函数是第一位的。</p>

<p>一般的编程语言中，包含 modules/class/function 等很多概念，
Javascript 中只有 function，通过 function 实现了上述所有功能。<br/>
通过 function 可以封装变量的命名空间，<br/>
通过 function 可以创建对象，即 class 的实例，<br/>
通过 Prototype 方式可以从一个对象继承出一个新的对象，不需要显式定义 class。</p>

<h2>DOM 与 BOM</h2>

<p>与浏览器配合，是 JAVAScript 的一大竞争力。</p>

<p>可以直接访问操纵 HTML，方便的控制显示的样式和内容。无需涉及太深的技术细节。
只要搞清显示的内容、用户操作等之间的关系即可。
可以理解为一种快速 GUI 的方式，跨平台。</p>

<p>事件监听让交互成为可能，极其方便的互动。</p>

<p>AJAX 动态获取数据，大大丰富了网页的行为。</p>

<h2>学习曲线与书籍</h2>

<ol>
<li><p><a href="http://book.douban.com/subject/3590768/">JavaScript语言精粹</a> 很关键。</p>

<p> js 与其他语言不同，没有在实验室中经过长时间的打磨，
 其中很多不好的特性没有被修复。<br/>
 不管是学习还是写代码的过程中，都需要有所侧重点。<br/>
 学习 js 之前先读一下第一章，熟悉一下基本的概念和名词。<br/>
 对js 有了一定理解以后，再回来认真的再读这本书，或许是不错的选择。</p></li>
<li><p><a href="http://book.douban.com/subject/10759600/">疯狂HTML 5/CSS 3/JavaScript讲义</a> 入门效率高。</p>

<p> 首先，这书写的真不咋地，<br/>
 一没什么思想性，二没多少优秀的实践，还比较不严禁！<br/>
 但是，条例性还不错，非常适合入门，一天翻完了解概貌的那种！</p></li>
<li><p><a href="http://book.douban.com/subject/10546125/">JavaScript高级程序设计（第3版）</a> 系统学习js的好书。</p>

<p> 对 js 的语法介绍的很细，分析的很透彻。来龙去脉很清晰。</p></li>
<li><p><a href="http://book.douban.com/subject/4881987/">编写高质量代码 : Web前端开发修炼之道</a> 学习编码规范。</p>

<p> 这书读起来速度快，不耽误时间。<br/>
 从最烂的代码一点一点优化到最佳规范，触动很大，也加深的对规范的理解。</p></li>
<li><p><a href="http://book.douban.com/subject/21792530/">编写可维护的JavaScript</a> 关于如何写出高质量的代码。</p>

<p> 内容很赞，讲解了规范的来龙去脉和影响。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim 全局插件的配置]]></title>
    <link href="http://JackonYang.github.io/blog/2013/04/19/vim-general-settings/"/>
    <updated>2013-04-19T16:46:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/04/19/vim-general-settings</id>
    <content type="html"><![CDATA[<p>前段时间发现自己的 vimrc 问题很大，一些关键配置无法兼容多个编程语言。</p>

<p>深入研究了一下 vim，重写了一套干净的配置文件，备份在 github 上。<a href="https://github.com/JackonYang/vimplugin">我的配置文件</a></p>

<!--more-->


<p>新的配置文件，严格区分全局插件和文件类型插件。
更详细的关于 vim plugin 原理的解释在<a href="http://JackonYang.github.io/blog/2013/04/19/vim-general-settings/">这里</a></p>

<p>本文只涉及全局插件的配置(global plugin)。</p>

<h2>系统配置</h2>

<p>vim normal 模式下禁用中文输入法，否则输入中文时很烦。
ibus 配置如下：</p>

<p><img src="http://JackonYang.github.io/images/escapeIbus.png"></p>

<p>这是一个初步的方案，原理就是 <code>Esc</code> 时顺便把输入法也禁用了。
后面可以继续正常切换，所以，并不是 vim normal 模式下完全不能用。</p>

<h2>必要设置</h2>

<p>通常要放在 vimrc 文件头，因为其他插件会依赖这几条设置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">nocompatible</span>  <span class="c">&quot; Use Vim defaults instead of 100% vi compatibility</span>
</span><span class='line'><span class="k">filetype</span> plugin indent <span class="k">on</span>
</span><span class='line'><span class="nb">syntax</span> <span class="k">on</span>
</span></code></pre></td></tr></table></div></figure>


<p>解释：</p>

<ol>
<li>不兼容 vi。vim 可以兼容 vi，但一些新特性是 vi 不支持的。所以要用 noncompatiable</li>
<li><p>打开了三个特性：自动检测文件类型，基于文件类型的插件生效，智能缩进。</p>

<p> 跟文件类型/编程语言有关的设置，基本都依赖于前两个。<br/>
 indent 的作用没这么基础，但也是要设置的，放在这里，整齐。</p></li>
<li>如果通篇的文字不是一个颜色，那就就需要打开这个特性。</li>
</ol>


<h2>字符编码 encoding</h2>

<p>涉及中文的，总要是先处理好字符编码问题。
关于 vim 字符编码工作原理的详细解释在 <a href="http://JackonYang.github.io/blog/2012/11/21/ubuntu-and-vim-encoding-settings/">这里</a></p>

<p>我的具体设置及原因如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; encoding</span>
</span><span class='line'><span class="k">set</span> <span class="nb">encoding</span><span class="p">=</span>utf<span class="m">-8</span>  <span class="c">&quot; vim cache encoding</span>
</span><span class='line'><span class="k">set</span> <span class="nb">fileencodings</span><span class="p">=</span>utf<span class="m">-8</span><span class="p">,</span>gb18030<span class="p">,</span>gbk <span class="c">&quot; open file with</span>
</span><span class='line'><span class="k">set</span> <span class="nb">fileencoding</span><span class="p">=</span>utf<span class="m">-8</span> <span class="c">&quot; save file with</span>
</span></code></pre></td></tr></table></div></figure>


<h2>tab</h2>

<p>关于使用 tab 还是用空格代替，争论很多。</p>

<p>我采用 4 空格替代一个 tab。
一方面是喜欢，另一方面是为了 python 的 pep8 规范</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; tabs</span>
</span><span class='line'><span class="k">set</span> <span class="nb">tabstop</span><span class="p">=</span><span class="m">4</span> <span class="c">&quot; tab width </span>
</span><span class='line'><span class="k">set</span> <span class="nb">shiftwidth</span><span class="p">=</span><span class="m">4</span> <span class="c">&quot; width of nested tabs</span>
</span><span class='line'><span class="k">set</span> <span class="nb">expandtab</span> <span class="c">&quot; input spaces instead of tab when typing a tab</span>
</span><span class='line'><span class="k">set</span> <span class="nb">softtabstop</span><span class="p">=</span><span class="m">4</span> <span class="c">&quot; 1. space deleted when typing &lt;BackSpace&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>高亮显示当前行 </h2>

<p>两个作用：</p>

<ol>
<li>清楚的看到空行/行尾是否有空格，有几个;</li>
<li>定位光标位置方便。</li>
</ol>


<p>使用<code>highlight_current_line.vim</code>插件，修改为当前行 darkgray 背景色。</p>

<p>默认是加粗字体，但编辑 markdown 时总有当前行设置了加粗的错觉。
没找到简单的配置方法，直接改了插件里面的颜色值</p>

<h2>自动补全</h2>

<p>自动补全包括两个:</p>

<ul>
<li>autocomplet:  &lt;tab>补一个单词或者文件名</li>
<li>snipmate: &lt;tab>补全一个模式，比如输入 def 后补全 python 的函数定义模板。</li>
</ul>


<p>装一下插件，默认配置即可。</p>

<h2>增强鼠标和 BACKSPACE</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; 如果当前 vim 支持鼠标，那么，启用鼠标。a 可以理解为所有模式(all)</span>
</span><span class='line'><span class="c">&quot; 严格说来，不是 all，以为不包括几个一般用户不关心的模式。</span>
</span><span class='line'><span class="k">if</span> has<span class="p">(</span><span class="s1">&#39;mouse&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">set</span> <span class="nb">mouse</span><span class="p">=</span><span class="k">a</span>
</span><span class='line'><span class="k">endif</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; &lt;BACKSPACE&gt;</span>
</span><span class='line'><span class="k">set</span> <span class="nb">backspace</span><span class="p">=</span>indent<span class="p">,</span><span class="nb">eol</span><span class="p">,</span><span class="k">start</span>  <span class="c">&quot; more powerful backspacing</span>
</span></code></pre></td></tr></table></div></figure>


<h2>增强提示行</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; status line</span>
</span><span class='line'><span class="c">&quot; always shown, shown as the second last line in the editor window</span>
</span><span class='line'><span class="k">set</span> <span class="nb">laststatus</span><span class="p">=</span><span class="m">2</span> <span class="c">&quot; </span>
</span><span class='line'><span class="c">&quot; format, by default, vim does not show the status line at all.</span>
</span><span class='line'><span class="k">set</span> <span class="nb">statusline</span><span class="p">=</span>%F%<span class="k">m</span>%<span class="k">r</span>%<span class="k">h</span>%<span class="k">w</span>\[FORMAT<span class="p">=</span>%{&amp;<span class="nb">ff</span>}]\[TYPE<span class="p">=</span>%Y]\[POS<span class="p">=</span>%<span class="m">04</span>l<span class="p">,</span>%<span class="m">04</span>v][%<span class="k">p</span>%%]\[LEN<span class="p">=</span>%L]
</span></code></pre></td></tr></table></div></figure>


<h2>搜索</h2>

<p>!!! 待补充</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; search as you type</span>
</span><span class='line'><span class="k">set</span> <span class="nb">incsearch</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ctrl-s 保存</h2>

<p>!!! 未完成</p>

<p>下面的设置，理论是应该是可以的。但执行无效。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; TODO: make it available</span>
</span><span class='line'><span class="c">&quot; to save, press ctrl-s</span>
</span><span class='line'><span class="c">&quot; nmap &lt;F3&gt; :w&lt;CR&gt;</span>
</span><span class='line'><span class="c">&quot; imap &lt;c-s&gt; &lt;Esc&gt;:w&lt;CR&gt;a</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ctags/cscope + taglist</h2>

<p>没研究清楚到底用哪个。两个都用稍微乱了一点的感觉。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python 学习计划与书目]]></title>
    <link href="http://JackonYang.github.io/blog/2013/04/17/python-learning-plan/"/>
    <updated>2013-04-17T10:29:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/04/17/python-learning-plan</id>
    <content type="html"><![CDATA[<p>已经有半年多 python 编程实践。现在是时候更加深入的理解 python 了。</p>

<p>具体计划如下:</p>

<!--more-->


<ol>
<li><p>再看入门书 《a byte of python》</p>

<p> 最早是看这个学习 python 的，现在再看一遍。主要看目录，反思当时的理解程度，学习的误区。</p></li>
<li><p>深入《dive into python》</p>

<p> 看过一部分，但是没有深入 python，没有很好的理解 python 特有的编程特性。</p>

<p> 深入学习 python 的特性，尤其是开包/闭包、生成器、迭代器、序列化等。</p></li>
<li><p>设计理念《master mind of programming》python 开发者的采访</p>

<p> 了解 python 的设计理念</p></li>
<li><p>字符编码</p>

<p> 中文的字符编码总是很头疼，需要专门的学习。</p></li>
<li><p>编程实践，calibre series index page</p>

<p> 从 calibre 的 metadata 中获取 tag/序列，生成单独的页面，并提供超链接。</p></li>
<li><p>python 源码剖析</p>

<p> 真正的深入理解 python</p></li>
<li><p>python 软件工程《expert programming》</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ 使用 markdown 编写文档]]></title>
    <link href="http://JackonYang.github.io/blog/2013/04/15/writing-with-markdown/"/>
    <updated>2013-04-15T01:52:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/04/15/writing-with-markdown</id>
    <content type="html"><![CDATA[<p>Markdown 是一种轻量级标记语言，所想即所得，优势较多：</p>

<ul>
<li>比 latex/html/xml 等更加便捷，可读性更高。</li>
<li>使用纯文本写作，可以方便的进行版本控制。</li>
<li>通过 pandoc 等工具可以方便的转换为 docx/html/latex 等多种格式。</li>
</ul>


<p>使用 markdown 已经半年多，结合多年的 latex 排版经验，整理如下。</p>

<!--more-->


<h2>markdown 设计理念 <a id="design"></a></h2>

<p>markdown 首先是一个所想即所得的语言。<br/>
精髓在于：源码可读性高，书写方便。</p>

<h4>高可读性的负面作用是逻辑和显示分离不彻底</h4>

<p>即使是初学者写出的 markdown 源码，读起来也像阅读最终的页面一样方便。<br/>
换一个角度思考就是，markdown 的源码与最终的显示样式还是有些关联的。<br/>
latex 彻底分离显示与逻辑结构，书写时只需关心逻辑结构。<br/>
一个典型的例子是：markdown 本没有标题的概念，只有字号，字号明显与逻辑无关，是一个显示样式。
latex 则是标题，下一级标题，下下一级标题——纯粹的逻辑结构</p>

<h4>首次书写方便，适合于快速迭代</h4>

<p>markdown 的本质是书写语言，可以满足一般的书写任务。<br/>
latex 则是排版语言，越追求完美的任务，latex 的优势越明显。<br/>
对于需要反复修改的文章，markdown 就显得力不从心。
比如：各种交叉引用、序号，都需要手动维护。</p>

<h2>语法的学习资料</h2>

<p><a href="http://daringfireball.net/projects/markdown/">markdown 首页</a> 提供了当不错的学习说明。<br/>
一个高效的学习方法是：
看 markdown 首页的介绍和源码、在 <a href="http://daringfireball.net/projects/markdown/dingus">dingus</a> 中测试一下效果。</p>

<p>markdown 版本众多，不同版本的语法存在一些区别。</p>

<h4>github wiki 语法</h4>

<p><a href="https://github.com/JackonYang/book-repo/wiki/markdown-%E8%AF%AD%E6%B3%95-%E6%A1%88%E5%88%97">wiki 语法案例</a>
包含了大部分常用的 markdown 语法。</p>

<p>使用 wiki 时需要特别注意：</p>

<ol>
<li><p>wiki 编辑时的工具栏。</p>

<p> 主要的功能是提示语法。如果能够记住语法，完全不需要工具栏。
 word的工具栏，则是直接把文字变成需要的样子。</p></li>
<li><p>第一个标题之前必须有正文文字，否则标题不会正常显示。</p></li>
</ol>


<h4>octopress blog</h4>

<p>提供了大量了插件，对 markdown 进行了扩充。
主要体现在插入代码源文件，插入图片等。</p>

<h2>书写高质量的代码</h2>

<p>关于高质量的 markdown 源码，个人理解如下：</p>

<ol>
<li>后续修改、维护方便。</li>
<li>文章本身的逻辑结构更加专业。</li>
</ol>


<p>具体做法如下：</p>

<ol>
<li><p>超链接多使用 reference 格式，后续维护链接的有效性时较为方便。</p>

<p> 即，正文中使用 <code>[显示内容][tag]</code>，
 用 <code>[tag]: url</code> 声明 tag 的指向，后续维护链接有效性时方便。</p></li>
<li><p>title 最多分 3 级。</p>

<p> 从 <code>#</code> 到 <code>######</code>，markdown 支持 6 层甚至更多的标题级别。<br/>
 但是，从写作实践来说，文章标题深度如果超过 3 层，通常是难以理解的。
 此时需要反思文章的内容结构是否合理。</p></li>
<li><p>文章内的超链接</p>

<p> 比如，本文在&#8221;设计理念&#8221;的标题处用 <code>&lt;a id="design"&gt;&lt;/a&gt;</code> 设置了一个 anchor，
 <a href="#design">点击这里</a>
 (语法<code>[点击这里](#desgin)</code> )
 可以直接跳到到那里。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[时间管理——调整自己心智的第一本书]]></title>
    <link href="http://JackonYang.github.io/blog/2013/04/12/first-book-for-beginners-to-open-its-mind/"/>
    <updated>2013-04-12T21:29:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/04/12/first-book-for-beginners-to-open-its-mind</id>
    <content type="html"><![CDATA[<p>拥有足够的可支配时间，是我们提升自我的基础。</p>

<p>时间管理，管理的不是时间，而是自己，调整心态，腾出更多可支配时间。</p>

<p>时间管理类的书籍，通常也是方法论的概述，
可以帮助我们对方法论和自身状态有一个宏观的了解。</p>

<!--more-->


<h2>图书推荐</h2>

<p>成功学、个人管理方面的书，关键在于理念。
而这种理念只有知道与不知道的区别，不像专业知识那样存在理解难度。
所以，这类书没有绝对的好与坏，关键是看跟读者的符合程度。</p>

<p>推荐两本数：</p>

<ul>
<li><a href="http://book.douban.com/subject/3609132/">把时间当作朋友</a>
  合适于基础基本为 0 的小菜鸟，尤其是本科低年级。</li>
<li><a href="http://book.douban.com/subject/6709809/">暗时间</a>
  适合水平稍微高一点，但缺乏深入了解的人</li>
</ul>


<p>两种阅读思路：</p>

<ol>
<li>垃圾时间慢慢阅读。</li>
<li>2-3 天快速读完《把时间当作朋友》，然后从《暗时间》中挑感兴趣的章节阅读即可。</li>
</ol>


<h4>《把时间当作朋友》</h4>

<ul>
<li>思路连贯，道理清晰，还有大量有说服力的案例。</li>
<li>基本覆盖了菜鸟要解决的共性问题，但又不冗余。</li>
<li>彩色字体标注重要句子，速读的同时不会错过有帮助的内容。</li>
</ul>


<h4>《暗时间》</h4>

<ul>
<li>刘未鹏 blog 的汇总，不可避免的有些乱，缺乏条例性。
  但是，文章的质量不容质疑！</li>
<li>很多重要话题都给出了参考书目，可以方便的进行深度阅读。</li>
<li>章节之间相对独立，可以打乱顺序阅读。</li>
</ul>


<h2>《把时间当作朋友》阅读建议</h2>

<p>这本书并不值得太细致的研究，速读为主。</p>

<p>以目录和各章节的小标题为纲，快速扫描。
非常符合自己的部分，适当放慢速度。
没有特殊感觉的章节，只看彩色字、案例、图表，然后挑感兴趣的阅读。</p>

<p>在不打乱生活节奏的前提下，最多 2-3 天速度完是比较可以接受的。</p>

<p>各章节重点概括如下：</p>

<ol>
<li>引入话题——心智最重要。
 我们一直强调的兴趣、方法，真的那么重要么？</li>
<li><p>努力控制自己的大脑，控制自己的情绪。</p>

<ul>
<li>不要害怕痛苦。论述相对深刻，推荐。</li>
<li>执着(推迟满足感)。很肤浅的解释，阅读价值为 0。</li>
</ul>
</li>
<li>时间管理。确感知时间 &ndash;> 记录时间开销 &ndash;> 预算 &ndash;> 审计 &ndash;> 真的需要计划么</li>
<li><p>学会学习</p>

<ul>
<li>获取知识的方法与误区</li>
<li>自学，正确对待老师</li>
<li>学会考试</li>
<li>学会记笔记</li>
</ul>
</li>
<li><p>批判思维。深入的理解成功学建议、努力、效率、人脉、时间观点等。</p></li>
<li>更深入的了解自己的内心世界。</li>
</ol>


<h2>《暗时间》阅读建议</h2>

<p>在读完《把时间当作朋友》以后，看以下章节即可:</p>

<ol>
<li>《暗时间·设计你的进度条》</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[方法论的相关图书及阅读建议]]></title>
    <link href="http://JackonYang.github.io/blog/2013/04/12/methodology-of-pragmatism/"/>
    <updated>2013-04-12T21:24:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/04/12/methodology-of-pragmatism</id>
    <content type="html"><![CDATA[<p>持续的学习，持续的让自己更优秀。
有一些方法，可以让我们做的更好更快，这就是所谓的方法论。</p>

<p>方法论可以包含很多分支，而且没有止镜。
我们不可能也没有必要过于系统全面的掌握方法论。</p>

<p>我想，方法论与实践应该是螺旋的关系，
即：学到新方法后立即实践，只有当实践遇到瓶颈的时候再转向方法论的学习。
没有实践，空有方法论，那就接近于空想主义了，终究只能纸上谈兵。</p>

<p>将自己读过的方法论的图书做一个整理总结，
用尽量少的书覆盖常用的方法论，即为实用主义。
书目见豆瓣豆列
<a href="http://book.douban.com/doulist/1987641/">实用主义方法论</a></p>

<!--more-->


<h2>书目分类</h2>

<p>个人认为，按照以下顺序学习，效率较高。
一般，每一个分类，精读一本即可。</p>

<h4>时间管理</h4>

<p>时间管理，管理的不是时间，而是自己。</p>

<p>调整自己的心态，腾出更多的时间来思考如何更好的提升自己。</p>

<p>时间管理类的书籍，通常也是方法论的概述。</p>

<h4>有效学习</h4>

<p>自我提升，学习是最高效可靠的方法。</p>

<p>我们以前的学习，真的有效么？
反思的最佳方法就是跟更优秀的实践对比，寻找差距。</p>

<h4>批判思维</h4>

<p>不加思索的接受别人的经验建议，还不如不接受。</p>

<p>培养一个明辨是非的理性逻辑。</p>

<h4>自学</h4>

<p>有了明辨是非的大脑，我们就可以更好的自学了。</p>

<p>据说，我们的知识，大多来自自学。</p>

<h4>阅读方法、笔记方法</h4>

<p>学习本身也要讲究方法的。</p>

<p>成功学的书籍，可以不用讲究太多的阅读方法和笔记方法。</p>

<p>其他的可就很有学问了！</p>

<h4>提升效率</h4>

<p>我们没有充足的时间来慢慢学习。</p>

<p>更好更快的完成当前任务，加速我们的提升速度。</p>

<h2>初学者的阅读建议</h2>

<h4>案例比对</h4>

<p>简单的理解，方法轮，就是学做事。
所以，我认为初学者的最佳阅读方式就是按列比对。
即：找出与自己符合的正面/反面典型，然后根据书中的推理进行深入思考。</p>

<p>通常，反面典型匹配的会比较多一些，思考如下内容：</p>

<ol>
<li>起源。追跟溯源，今后将缺点扼杀于萌芽状态。</li>
<li>以前是否有意识到。若没有，反思原因。</li>
<li><p>是否需要改正。</p>

<ul>
<li>做事总是有成本的，需要计算回报率。</li>
<li>事物都是两面性的，没有绝对的缺点。</li>
</ul>
</li>
<li>今后怎么做。有缺点不是我们的错，拿出来害人害己就有些坑爹了。</li>
</ol>


<p>对于优点，关键是要注意：在改正其他缺点的时候，别把这个也一个不小心改没了。</p>

<h4>为什么拟定这个题目</h4>

<p>优秀的书籍，题目一定是核心思想的体现。</p>

<p>理解了为什么选择这个题目，也就大概理解的全书的核心思想。</p>

<p>如果核心思想有好几个，一般只有两个可能：</p>

<ul>
<li>不是自己理解错了，</li>
<li>这本书没有思想，不值得阅读。</li>
</ul>


<h4>用目录揣测作者的思路</h4>

<p>目录一定是核心思路的体现，目录中的内容是每一个模块的核心。</p>

<p>科技类写作的一般原则是：
用一句话概括该模块的核心思想。大到一本书，小到一个段落。</p>

<p>优秀的书籍，总是能够让熟悉该领域的人只看目录就理解全书的框架，文学作品例外。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于'没有时间'的反思与解决方案]]></title>
    <link href="http://JackonYang.github.io/blog/2013/04/12/find-more-time/"/>
    <updated>2013-04-12T02:09:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/04/12/find-more-time</id>
    <content type="html"><![CDATA[<h2>每天都在忙</h2>

<p>我们常常觉得忙，没有足够的时间做自己想做的事，尤其是学生。</p>

<p>上课、作业、社团活动、娱乐、自学……如此多的任务!</p>

<p>解决这个问题的思路其实很简单，地球人都知道:</p>

<!--more-->


<ol>
<li>不需要的事情，不要做</li>
<li>必须要做的事，高效做</li>
</ol>


<p>但是，我们不知道自己每天在忙些什么， 不知道哪些可以不做，哪些可以提高效率。</p>

<h2>每天都在忙什么——用物理实验的方法探求</h2>

<p>连续几天记录自己做的事情，然后进行分析总结。</p>

<p>具体怎么实施？记录哪些细节？
这件事，本质上跟做物理实验一样:
观察、记录实验数据、分析实验数据、归纳重要结论。</p>

<p>将物理实验的方法用于解决生活问题，好处多多：</p>

<ol>
<li>将课内所学应用于实际生活，处理问题时更加专业、高效——提高办事效率的根本方法。</li>
<li>当一个理论被成功应用到原本不相干领域时， 我们会更加深刻的理解理论的精髓。</li>
</ol>


<p>参考物理实验的分析思路，该问题细化如下：</p>

<h2>实验目的</h2>

<p>观察自己每天到底在做什么，效率如何。</p>

<h2>实验分析</h2>

<p>要知道每天在做什么，按时间顺序记流水账即可: 几点到几点，做了什么事。</p>

<p>若要知道效率，则需要记录每一件事情的结果、得与失。比如：</p>

<ul>
<li>上课: 学到了那些知识，理解的好不好。</li>
<li>做作业: 做了几个题，学会了什么。</li>
<li>自学/看书: 看了几页书，掌握了什么知识点。</li>
</ul>


<p>由此可知，流水账需要记录以下内容：</p>

<ul>
<li>起始时间 结束时间</li>
<li>事件描述</li>
<li>得失——后续分析时，据此计算有效学习时间</li>
<li>每隔 2 个小时测一次体温，原因：<a href="http://book.douban.com/subject/2458027/">powerful sleep</a> 电子版下载：<a href="http://vdisk.weibo.com/s/xdxDO">英文版</a> <a href="http://vdisk.weibo.com/s/xdxvy">中文版</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Win7 系统安装与常用软件列表]]></title>
    <link href="http://JackonYang.github.io/blog/2013/04/10/win7-settings/"/>
    <updated>2013-04-10T22:18:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/04/10/win7-settings</id>
    <content type="html"><![CDATA[<p>主要记录个人安装 win7 的步骤，以及常用软件列表。</p>

<!--more-->


<h4>系统安装与磁盘分区</h4>

<p>鉴于 win7 与 xp 磁盘管理机制的根本区别，操作系统与软件全部装在 c 盘。
保证 c 盘至少有 20G 的剩余空间即可。</p>

<p>个人采用 80G 的 c 盘分区，NTFS 格式。</p>

<p>安装以后激活系统，使用 <code>Win7_active_1.0_XiaZaiBa.exe</code></p>

<p>安装驱动，从电脑官网下载即可。</p>

<h4>系统优化设置</h4>

<ol>
<li>通知设置：控制面板\系统和安全\操作中心\更改操作中心设置</li>
<li>防火墙：控制面板\系统和安全\Windows 防火墙</li>
<li>自动更新：控制面板\系统和安全\Windows Update\更改设置</li>
<li>账户控制：更改设置时，不提醒。运行软件时提醒。控制面板\系统和安全\操作中心</li>
<li>自动播放：控制面板\硬件和声音\自动播放</li>
</ol>


<h4>日常应用软件–daily</h4>

<p>使用习惯:</p>

<ol>
<li>软件全部安装到 c 盘。非软件统一放到 d 盘。</li>
<li>所有的下载文件，全部保存到 d:\download 。比如浏览器下载、iku、千千静听</li>
<li>平常不使用，但重装系统时需要备份的，统一放到 d:\backup。比如 qq 自定义文件夹</li>
<li>临时文件全部放在 d:\temp</li>
<li>图片、音乐等分别放到 d:\picture, d:\music</li>
</ol>


<p>软件列表：</p>

<ol>
<li>输入法：
<a href="http://download.ime.sogou.com/sogou_pinyin_65j.exe?st=2T7jLQwCiahxQxVeky3YaA&amp;e=1365531122&amp;fn=sogou_pinyin_65j.exe">搜狗</a></li>
<li>浏览器：
 <a href="http://download.ie.sogou.com/se/sogou_explorer_4.1_0409.exe">搜狗</a>,
 <a href="http://download.firefox.com.cn/releases/partners/baidu/webins3.0/zh-CN/Firefox-setup.exe">firefox</a></li>
<li>pdf 阅读器：
 <a href="http://cdn04.foxitsoftware.com/pub/foxit/reader/desktop/win/5.x/5.1/chs/FoxitReader510.1117_chs_Setup.exe">foxit</a></li>
<li>文字办公：
 <a href="http://wdl.cache.ijinshan.com/wps/download/WPS.19.552.exe">wps</a></li>
<li>实时聊天：
 <a href="http://afp.csbew.com/c.htm?pv=1&amp;sp=0,41109,90211,71935,0,90,728&amp;target=http://skype.tom.com/download/SkypeSetup.exe">skype</a>,
 <a href="http://dldir1.qq.com/qqfile/qq/QQ2013/2013Beta2/8051/QQ2013Beta2.exe">qq</a>,
 <a href="http://download.fetion-portal.com/Fetion2013March.exe">feixin</a></li>
<li>音乐：
 <a href="http://qianqian.baidu.com/download/ttpsetup_700-44059078.exe">千千静听</a></li>
<li>电影：
 <a href="http://dl.baofeng.com/baofeng5/Baofeng5-5.23.0328.exe">暴风影音</a></li>
<li>在线视频播放：
 <a href="http://neirong.funshion.com/download/FunshionInstall2.8.5.24.exe">风行</a>,
 <a href="http://desktop.youku.com/youkuclient/youkuclient_setup_3.9.0.3271.exe">优库</a>,
 <a href="http://download.tudou.com/itudou/download/iTudou_Setup_3.3.1.0_20130123-181452.exe">土豆</a></li>
<li>词典：
 <a href="http://codown.youdao.com/cidian/download/YoudaoDict.exe">有道</a></li>
</ol>


<h4>工具类软件–tools</h4>

<ul>
<li>必选：winrar， SlysoftVirtualCloneDrive(虚拟光驱，支持 64bit)</li>
<li>可选：iNode(校园网客户端)，p2pcover(局域网网速监控)，wisecam(桌面录制)</li>
</ul>


<h4>高级应用软件–better life</h4>

<ol>
<li>图书管理：calibre <a href="http://calibre-ebook.com/demo">英文版的演示视频</a></li>
<li>心智图：xmind</li>
<li>资料管理：github</li>
<li>编辑器：gvim</li>
<li>撰写论文：ctex(latex), JabRef(参考文献管理)</li>
<li>科学计算：matlab</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[matlab 做图的基本概念]]></title>
    <link href="http://JackonYang.github.io/blog/2013/04/09/matlab-plot/"/>
    <updated>2013-04-09T22:47:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/04/09/matlab-plot</id>
    <content type="html"><![CDATA[<p>matlab 做图，主要可以分成两种情况:</p>

<ol>
<li>根据函数做图，比如 y=x 的函数图像。</li>
<li>根据散点拟合函数图像，这些散点往往是一组实验数据。</li>
</ol>


<p>我始终认为，若要快速而又牢固的掌握一门知识，最简洁的方法就是：</p>

<pre><code>自己先思考怎么解决这个问题，然后再看当前的主流解决方案。
</code></pre>

<p>不管是算法，还是语法，都是有章可循的，无需背诵。</p>

<!--more-->


<h2>人的做图算法</h2>

<p>中学时代，不懂电脑，我们是怎么作函数图像的？</p>

<p>取点 &ndash;> 描点 &ndash;> 连点成线。</p>

<p>其中，取点是比较有学问的，比如:
直线取 2 点，抛物线要取到最低点。
连点成线也很有技巧，直线直着连，曲线圆滑着连。</p>

<p>如果是根据散点做图，那就省了取点的步骤，
但是，连点成线的时候，往往不知道该用什么样的圆滑曲线。</p>

<h2>matlab 作图算法的本质</h2>

<p>这里详细介绍<a href="http://jackonyang.github.io/blog/2013/04/09/algrithm_basic/">人的算法与计算机算法的区别</a></p>

<p>根据对人的做图算法的分析，我们可以发现：
做图的本质就是连点成线，计算机完全可以胜任这个工作。
而难点就在于连点成线时，使用什么样的圆滑曲线。</p>

<p>根据微积分的思想，
只要我们把点取的足够密集，点与点之间的连线都可以看作是直线。
所以，只要能取足够密集的点，用直线连接即可。
这种算法是非常适合于计算机来实现的。</p>

<p>matlab 做图的本质就是：取点、描点、连点成线。
任何复杂的做图都可以拆解为这三步来实现。</p>

<ol>
<li><p>取点</p>

<p> 如果是根据散点做图，点已经取好。</p>

<p> 如果是函数图像，取一组 x，根据函数图像计算出 y 值即可。
 当然，根据 y 计算 x 也一样。</p></li>
<li><p>描点</p>

<p> 把刚刚取好的一组 x 和 y 画上去即可。</p></li>
<li><p>连点成线</p>

<p> 一般用直线连接起来即可。</p></li>
</ol>


<h2>matlab 做图的具体方法与语法</h2>

<h4>最简单的基础图 <code>plot(x,y)</code></h4>

<p>取点的本质就是生成两个长度相同的向量。
方法很多，也不是做图的重点。
此处不详细说明。</p>

<p>有了散点之后就是描点，用命令 <code>plot(x,y)</code>。
其中，x 是横坐标，y 是纵坐标。
如果是一组点，那么只要把 x,y 分别变成矩阵即可。</p>

<p>连点成线时，通常用直线直接连就是了，
所以也就没必要让大家手动执行，matlab 自动完成了。</p>

<h4>控制线的形状和颜色 <code>plot(x,y,'r:')</code></h4>

<p>如果我们在一个图中做了很多条线，那就需要控制一下线的形状和颜色了。</p>

<p>鉴于连点成线是自动完成的，最好的办法是：
plot 时明确指明线的形状和颜色，以取代默认设置。</p>

<p>具体到语法层面，每一种颜色、形状都有一个代号，
比如红色是 <code>r</code>，白色是 <code>w</code>，<code>-</code>是实线。
更多的代号，找一本matlab教材或者自带的help文档查看一下即可。
所以，最后的命令格式是 <code>plot(x,y,'r:')</code>(红色虚线)。
注意，要加上单引号，否则，matlab会处理为名字为 r 的变量。</p>

<h2>控制点的形状 <code>plot(x,y,'o')</code></h2>

<p>一般，连点成线以后，只关心函数图像，而不关心具体的点。
但也有例外，比如: 根据实验测得的散点做出函数图像，
我们首先关心散点在图像上的具体位置。</p>

<p>理论上，可以通过控制点的形状和颜色让点更加醒目，与控制线的形状和颜色一样。
实际上，点的颜色是否醒目，受线的颜色影响很大，不适合采用。
而且，只通过点的形状就足以让点变的醒目。
所以，我们只需用代号控制点的形状即可，比如<code>x</code>是叉，<code>o</code>是圆圈。</p>

<p><code>plot(x,y,'r:*')</code> 红色虚线，星状的点。</p>

<p><img src="http://JackonYang.github.io/images/matlab_plot_basic.png"></p>

<h2>控制做图细节</h2>

<p>这一部分东西，如果要细说起来，无穷无尽。
一些人喜欢通过展示各种边边角角的细节证明自己精通 matlab。</p>

<p>我想，重要的是：我们需要那些功能，如何实现这些功能。
只要熟练掌握一种适合自己方法即可。</p>

<p>以下几个命令较为实用：</p>

<ol>
<li><p>图形保持与关闭保持。</p>

<p> 默认关闭，即做图时会覆盖以前的图。若不希望被覆盖，则 hold on.</p></li>
<li><p>图形标注。</p>

<p> 具体包括：标题、每一条图像的含义、横纵坐标轴的含义。
 对应的命令分别是 title, legend, xlabel/ylabel.</p></li>
<li><p>给特殊点加注释。</p>

<p><code>text(x,y,'desc')</code> 其中 x,y 是横纵坐标。</p></li>
</ol>


<p>源码与效果图如下：</p>

<figure class='code'><figcaption><span>标注图形细节  (plot_detail.m)</span> <a href='http://JackonYang.github.io/downloads/code/plot_detail.m'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='matlab'><span class='line'><span class="n">clear</span>
</span><span class='line'><span class="n">clc</span>
</span><span class='line'><span class="n">y</span><span class="p">=</span>1<span class="p">:</span>1<span class="p">:</span>10<span class="p">;</span>
</span><span class='line'><span class="n">x</span><span class="p">=</span>10<span class="p">:</span><span class="o">-</span>1<span class="p">:</span>1<span class="p">;</span>
</span><span class='line'><span class="n">plot</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>  <span class="c">% 第一图像</span>
</span><span class='line'><span class="n">hold</span> <span class="n">on</span>  <span class="c">% 图形保持</span>
</span><span class='line'><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>  <span class="c">% 第二图像</span>
</span><span class='line'><span class="n">title</span><span class="p">(</span><span class="s">&#39;name of tilte&#39;</span><span class="p">)</span>  <span class="c">% 标题</span>
</span><span class='line'><span class="n">xlabel</span><span class="p">(</span><span class="s">&#39;label x&#39;</span><span class="p">)</span>  <span class="c">% x 轴</span>
</span><span class='line'><span class="n">ylabel</span><span class="p">(</span><span class="s">&#39;label y&#39;</span><span class="p">)</span>  <span class="c">% y 轴</span>
</span><span class='line'><span class="n">legend</span><span class="p">(</span><span class="s">&#39;no x&#39;</span><span class="p">,</span><span class="s">&#39;has x&#39;</span><span class="p">)</span>  <span class="c">% 图像的标注，按照做图的顺序，依次标注，不能多或少，不能混淆顺序。</span>
</span><span class='line'><span class="n">text</span><span class="p">(</span>2<span class="p">,</span>2<span class="p">,</span><span class="s">&#39;special spot&#39;</span><span class="p">)</span>  <span class="c">% 在 (2,2) 点加标注</span>
</span><span class='line'><span class="n">text</span><span class="p">(</span>5<span class="p">.</span>5<span class="p">,</span>5<span class="p">.</span>5<span class="p">,</span><span class="s">&#39; \leftarrow VIP spot&#39;</span><span class="p">)</span>  <span class="c">% 在（5.5，5.5)点加标注。</span>
</span><span class='line'>            <span class="c">% 其中，注释中的\leftarrow 是一个转义字符，类似 c 语言的 \n</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">gcf</span><span class="p">,</span><span class="s">&#39;-dpng&#39;</span><span class="p">,</span><span class="s">&#39;plot_detail.png&#39;</span><span class="p">)</span> <span class="c">% 保存当前图像， png 格式，名字是 plot_detail.png</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://JackonYang.github.io/downloads/code/plot_detail.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[人的算法与计算机的算法]]></title>
    <link href="http://JackonYang.github.io/blog/2013/04/09/algrithm-basic/"/>
    <updated>2013-04-09T00:07:00+08:00</updated>
    <id>http://JackonYang.github.io/blog/2013/04/09/algrithm-basic</id>
    <content type="html"><![CDATA[<p>本文定位：让不懂算法的人理解计算机算法的基本概念。</p>

<p>算法是一个比较宽泛的概念，不仅仅局限在计算机领域。</p>

<p>所谓的算法，其实就是处理问题的套路与流程，比如排序算法、求最大公约数算法。
广义来说，任何一种处理问题的套路与方法都是一个算法。</p>

<p>我想，案例 + 深入分析是理解问题的最好方式。
通过排序算法来深入理解这个概念。 即：给出一列数据，要求升序或降序排列。</p>

<!--more-->


<h2>人的排序算法</h2>

<p>通常的做法可能是：选出最小的数，放在第一个。然后找次小的，放第二个。依次类推。</p>

<p>但是，如果这组数据是基本排好顺序的，比如: 1, 2, 3, 6, 5, 9。 我们只把那些顺序不对的交换一下即可。 如果这组是部分有序的，比如: 4, 5, 6, 1, 2, 3。 我们只需要把两部分整体对调一下即可。</p>

<p>后两种算法的运算量明显小于前者，排序速度更快。 人脑会优先选择后两种方法。</p>

<h2>机器的排序算法</h2>

<p>如果把第 1 种算法上升到编程课上学过的排序算法，这就是
<a href="http://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F">选择排序法</a>
的根本原理。
与人脑的区别在于，人可以一眼扫过去快速找到最小的数，
而计算机每次都要从头到尾逐个比较。</p>

<p>更有名气的排序算法可能是<a href="http://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F">冒泡法</a>，
更能体现计算机排序的本质: 逐个比较。
这里有一段<a href="http://v.youku.com/v_show/id_XMjU4MTg3MTU2.html">冒泡排序的舞蹈</a></p>

<p>至于人脑的后两个排序算法，在计算机中并不常见。</p>

<h2>机器算法与人的算法比较</h2>

<p>计算机的优势在于运算速度快，而人脑则是逻辑思维强大。 从某种意义上说，逻辑思考也是一种运算，但计算机并不擅长这类运算。</p>

<p>在处理实际问题时，人脑倾向于运算量小的算法，甚至不惜用大量复杂逻辑来降低运算量。 而计算机则恰恰相反，超强的计算能力不需要担心运算量问题。 比如选择排序算法，人脑手工做，很难在几秒内完成，计算机却可以瞬间完成。 所以，对于一些特殊情况，人脑会投机取巧减少运算量以提升解决问题的速度。 为此付出的代价是，逻辑更加复杂了。计算机则完全不需要。</p>

<h2>计算机算法的执行效率与优化问题</h2>

<p>通常，对于小规模的问题，即使用最慢的方法，计算机也能瞬间给出结果， 讨论计算机算法的执行效率显得很没有意义。 但是，问题规模较大时，比如给 1 亿个数字排序，计算机也不能瞬间给出结果， 此时就不得不跟人脑一样，选用逻辑复杂一些的算法来减少运算量。 这就是所谓的算法优化问题。</p>
]]></content>
  </entry>
  
</feed>
